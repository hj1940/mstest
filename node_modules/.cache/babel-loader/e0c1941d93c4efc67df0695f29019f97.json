{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n/**\n * Sanitizes text by converting to a locale-friendly lower-case version and triming leading and trailing whitespace.\n */\n\n\nvar LowerCaseSanitizer = exports.LowerCaseSanitizer = function () {\n  function LowerCaseSanitizer() {\n    _classCallCheck(this, LowerCaseSanitizer);\n  }\n\n  _createClass(LowerCaseSanitizer, [{\n    key: 'sanitize',\n\n    /**\n     * @inheritDocs\n     */\n    value: function sanitize(text) {\n      return text ? text.toLocaleLowerCase().trim() : '';\n    }\n  }]);\n\n  return LowerCaseSanitizer;\n}();\n\n;","map":{"version":3,"sources":["../../../source/Sanitizer/LowerCaseSanitizer.js"],"names":["LowerCaseSanitizer","text"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAIA;;;;;IAGaA,kB,WAAAA,kB;;;;;;;;AAEX;;;6BAGSC,I,EAAwB;AAC/B,aAAOA,IAAAA,GAAOA,IAAAA,CAAAA,iBAAAA,GAAPA,IAAOA,EAAPA,GAAP,EAAA;AACD;;;;;;AACF","sourcesContent":["// @flow\n\nimport type { ISanitizer } from './Sanitizer';\n\n/**\n * Sanitizes text by converting to a locale-friendly lower-case version and triming leading and trailing whitespace.\n */\nexport class LowerCaseSanitizer implements ISanitizer {\n\n  /**\n   * @inheritDocs\n   */\n  sanitize(text : string) : string {\n    return text ? text.toLocaleLowerCase().trim() : '';\n  }\n};\n"]},"metadata":{},"sourceType":"script"}