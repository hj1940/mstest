{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\19065019\\\\react-test\\\\src\\\\components\\\\RenderCanvas\\\\GenericCanvasElement\\\\index.js\";\nimport React, { Component } from 'react';\nimport './index.css';\nimport Draggable, { DraggableCore } from 'react-draggable';\nimport { NotificationManager } from 'react-notifications';\n\nclass GenericCanvasElement extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      tryCount: 0\n    };\n  }\n\n  render() {\n    const _this$props = this.props,\n          renderable = _this$props.renderable,\n          onUpdateRenderablePosition = _this$props.onUpdateRenderablePosition,\n          summary = _this$props.summary,\n          onStart = _this$props.onStart,\n          onStop = _this$props.onStop,\n          onClick = _this$props.onClick,\n          selected = _this$props.selected;\n    const tryCount = this.state.tryCount;\n    let imgLink = summary;\n    if (summary.indexOf('?') !== -1) imgLink = summary + `&tryCount=${tryCount}`;else imgLink = summary + `?tryCount=${tryCount}`;\n    return React.createElement(DraggableCore, {\n      onStart: onStart,\n      onStop: onStop,\n      onDrag: onUpdateRenderablePosition,\n      position: renderable.position,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 21\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: 'flex' + (selected ? ' selected-canvas-element' : ''),\n      style: {\n        transform: `translate(${renderable.position.x}px, ${renderable.position.y}px) translate(-50%, -100%)`\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 27\n      },\n      __self: this\n    }, React.createElement(\"img\", {\n      src: imgLink,\n      alt: \"\",\n      className: \"renderable-instance\",\n      draggable: false,\n      onClick: onClick,\n      onError: this.showError.bind(this),\n      style: {\n        position: 'relative',\n        touchAction: 'none',\n        transform: renderable.flipX ? 'scaleX(-1)' : ''\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 28\n      },\n      __self: this\n    })));\n  }\n\n  showError() {\n    setTimeout(function () {\n      if (this.state.tryCount < 10) {\n        setTimeout(function () {\n          this.setState({\n            tryCount: this.state.tryCount + 1\n          });\n        }.bind(this), 2500);\n      }\n    }.bind(this), 7500);\n  }\n\n}\n\nexport default GenericCanvasElement;","map":{"version":3,"sources":["C:/Users/19065019/react-test/src/components/RenderCanvas/GenericCanvasElement/index.js"],"names":["React","Component","Draggable","DraggableCore","NotificationManager","GenericCanvasElement","constructor","props","state","tryCount","render","renderable","onUpdateRenderablePosition","summary","onStart","onStop","onClick","selected","imgLink","indexOf","position","transform","x","y","showError","bind","touchAction","flipX","setTimeout","setState"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAO,aAAP;AACA,OAAOC,SAAP,IAAoBC,aAApB,QAAyC,iBAAzC;AACA,SAASC,mBAAT,QAAoC,qBAApC;;AAEA,MAAMC,oBAAN,SAAmCJ,SAAnC,CAA6C;AAC3CK,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AAEA,SAAKC,KAAL,GAAa;AACXC,MAAAA,QAAQ,EAAE;AADC,KAAb;AAGD;;AACDC,EAAAA,MAAM,GAAG;AAAA,wBACyF,KAAKH,KAD9F;AAAA,UACCI,UADD,eACCA,UADD;AAAA,UACaC,0BADb,eACaA,0BADb;AAAA,UACyCC,OADzC,eACyCA,OADzC;AAAA,UACkDC,OADlD,eACkDA,OADlD;AAAA,UAC2DC,MAD3D,eAC2DA,MAD3D;AAAA,UACmEC,OADnE,eACmEA,OADnE;AAAA,UAC4EC,QAD5E,eAC4EA,QAD5E;AAAA,UAECR,QAFD,GAEc,KAAKD,KAFnB,CAECC,QAFD;AAGP,QAAIS,OAAO,GAAGL,OAAd;AACA,QAAIA,OAAO,CAACM,OAAR,CAAgB,GAAhB,MAAyB,CAAC,CAA9B,EAAiCD,OAAO,GAAGL,OAAO,GAAI,aAAYJ,QAAS,EAA1C,CAAjC,KACKS,OAAO,GAAGL,OAAO,GAAI,aAAYJ,QAAS,EAA1C;AACL,WACE,oBAAC,aAAD;AACE,MAAA,OAAO,EAAEK,OADX;AAEE,MAAA,MAAM,EAAEC,MAFV;AAGE,MAAA,MAAM,EAAEH,0BAHV;AAIE,MAAA,QAAQ,EAAED,UAAU,CAACS,QAJvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAME;AAAK,MAAA,SAAS,EAAE,UAAUH,QAAQ,GAAG,0BAAH,GAAgC,EAAlD,CAAhB;AAAuE,MAAA,KAAK,EAAE;AAAEI,QAAAA,SAAS,EAAG,aAAYV,UAAU,CAACS,QAAX,CAAoBE,CAAE,OAAMX,UAAU,CAACS,QAAX,CAAoBG,CAAE;AAA5E,OAA9E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AACE,MAAA,GAAG,EAAEL,OADP;AAEE,MAAA,GAAG,EAAC,EAFN;AAGE,MAAA,SAAS,EAAC,qBAHZ;AAIE,MAAA,SAAS,EAAE,KAJb;AAKE,MAAA,OAAO,EAAEF,OALX;AAME,MAAA,OAAO,EAAE,KAAKQ,SAAL,CAAeC,IAAf,CAAoB,IAApB,CANX;AAOE,MAAA,KAAK,EAAE;AACLL,QAAAA,QAAQ,EAAE,UADL;AAELM,QAAAA,WAAW,EAAE,MAFR;AAGLL,QAAAA,SAAS,EAAEV,UAAU,CAACgB,KAAX,GAAmB,YAAnB,GAAkC;AAHxC,OAPT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CANF,CADF;AAwBD;;AAEDH,EAAAA,SAAS,GAAG;AACVI,IAAAA,UAAU,CAAC,YAAY;AACrB,UAAI,KAAKpB,KAAL,CAAWC,QAAX,GAAsB,EAA1B,EAA8B;AAC5BmB,QAAAA,UAAU,CAAC,YAAY;AACrB,eAAKC,QAAL,CAAc;AAAEpB,YAAAA,QAAQ,EAAE,KAAKD,KAAL,CAAWC,QAAX,GAAsB;AAAlC,WAAd;AACD,SAFU,CAETgB,IAFS,CAEJ,IAFI,CAAD,EAEI,IAFJ,CAAV;AAGD;AACF,KANU,CAMTA,IANS,CAMJ,IANI,CAAD,EAMI,IANJ,CAAV;AAOD;;AAhD0C;;AAmD7C,eAAepB,oBAAf","sourcesContent":["import React, { Component } from 'react'\nimport './index.css'\nimport Draggable, { DraggableCore } from 'react-draggable'\nimport { NotificationManager } from 'react-notifications'\n\nclass GenericCanvasElement extends Component {\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      tryCount: 0\n    }\n  }\n  render() {\n    const { renderable, onUpdateRenderablePosition, summary, onStart, onStop, onClick, selected } = this.props\n    const { tryCount } = this.state\n    let imgLink = summary\n    if (summary.indexOf('?') !== -1) imgLink = summary + `&tryCount=${tryCount}`\n    else imgLink = summary + `?tryCount=${tryCount}`\n    return (\n      <DraggableCore\n        onStart={onStart}\n        onStop={onStop}\n        onDrag={onUpdateRenderablePosition}\n        position={renderable.position}\n        >\n        <div className={'flex' + (selected ? ' selected-canvas-element' : '')} style={{ transform: `translate(${renderable.position.x}px, ${renderable.position.y}px) translate(-50%, -100%)` }}>\n          <img\n            src={imgLink}\n            alt=''\n            className='renderable-instance'\n            draggable={false}\n            onClick={onClick}\n            onError={this.showError.bind(this)}\n            style={{\n              position: 'relative',\n              touchAction: 'none',\n              transform: renderable.flipX ? 'scaleX(-1)' : ''\n            }}\n            />\n        </div>\n        </DraggableCore>\n    )\n  }\n\n  showError() {\n    setTimeout(function () {\n      if (this.state.tryCount < 10) {\n        setTimeout(function () {\n          this.setState({ tryCount: this.state.tryCount + 1 })\n        }.bind(this), 2500)\n      }\n    }.bind(this), 7500)\n  }\n}\n\nexport default GenericCanvasElement\n"]},"metadata":{},"sourceType":"module"}