{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nvar REGEX = /[^a-zа-яё0-9\\-']+/i;\n/**\n * Simple tokenizer that splits strings on whitespace characters and returns an array of all non-empty substrings.\n */\n\nvar SimpleTokenizer = exports.SimpleTokenizer = function () {\n  function SimpleTokenizer() {\n    _classCallCheck(this, SimpleTokenizer);\n  }\n\n  _createClass(SimpleTokenizer, [{\n    key: 'tokenize',\n\n    /**\n     * @inheritDocs\n     */\n    value: function tokenize(text) {\n      return text.split(REGEX).filter(function (text) {\n        return text;\n      } // Filter empty tokens\n      );\n    }\n  }]);\n\n  return SimpleTokenizer;\n}();\n\n;","map":{"version":3,"sources":["../../../source/Tokenizer/SimpleTokenizer.js"],"names":["REGEX","SimpleTokenizer","text"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAIA,IAAIA,KAAAA,GAAJ,oBAAA;AAEA;;;;IAGaC,e,WAAAA,e;;;;;;;;AAEX;;;6BAGSC,I,EAA+B;AACtC,aAAO,IAAA,CAAA,KAAA,CAAA,KAAA,EAAA,MAAA,CAGH,UAAA,IAAA,EAAA;AAAA,eAAA,IAAA;AAHG,OAAA,CAGY;AAHZ,OAAP;AAKD;;;;;;AACF","sourcesContent":["// @flow\n\nimport type { ITokenizer } from './Tokenizer';\n\nvar REGEX = /[^a-zа-яё0-9\\-']+/i;\n\n/**\n * Simple tokenizer that splits strings on whitespace characters and returns an array of all non-empty substrings.\n */\nexport class SimpleTokenizer implements ITokenizer {\n\n  /**\n   * @inheritDocs\n   */\n  tokenize(text : string) : Array<string> {\n    return text\n      .split(REGEX)\n      .filter(\n        (text) => text // Filter empty tokens\n      );\n  }\n};\n"]},"metadata":{},"sourceType":"script"}