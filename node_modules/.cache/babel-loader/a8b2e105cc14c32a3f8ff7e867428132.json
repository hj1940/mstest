{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n/**\n * Indexes for all substring searches (e.g. the term \"cat\" is indexed as \"c\", \"ca\", \"cat\", \"a\", \"at\", and \"t\").\n */\n\n\nvar AllSubstringsIndexStrategy = exports.AllSubstringsIndexStrategy = function () {\n  function AllSubstringsIndexStrategy() {\n    _classCallCheck(this, AllSubstringsIndexStrategy);\n  }\n\n  _createClass(AllSubstringsIndexStrategy, [{\n    key: 'expandToken',\n\n    /**\n     * @inheritDocs\n     */\n    value: function expandToken(token) {\n      var expandedTokens = [];\n      var string;\n\n      for (var i = 0, length = token.length; i < length; ++i) {\n        string = '';\n\n        for (var j = i; j < length; ++j) {\n          string += token.charAt(j);\n          expandedTokens.push(string);\n        }\n      }\n\n      return expandedTokens;\n    }\n  }]);\n\n  return AllSubstringsIndexStrategy;\n}();\n\n;","map":{"version":3,"sources":["../../../source/IndexStrategy/AllSubstringsIndexStrategy.js"],"names":["AllSubstringsIndexStrategy","token","expandedTokens","i","length","string","j"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAIA;;;;;IAGaA,0B,WAAAA,0B;;;;;;;;AAEX;;;gCAGYC,K,EAAgC;AAC1C,UAAIC,cAAAA,GAAJ,EAAA;AACA,UAAA,MAAA;;AAEA,WAAK,IAAIC,CAAAA,GAAJ,CAAA,EAAWC,MAAAA,GAASH,KAAAA,CAAzB,MAAA,EAAuCE,CAAAA,GAAvC,MAAA,EAAmD,EAAnD,CAAA,EAAwD;AACtDE,QAAAA,MAAAA,GAAAA,EAAAA;;AAEA,aAAK,IAAIC,CAAAA,GAAT,CAAA,EAAgBA,CAAAA,GAAhB,MAAA,EAA4B,EAA5B,CAAA,EAAiC;AAC/BD,UAAAA,MAAAA,IAAUJ,KAAAA,CAAAA,MAAAA,CAAVI,CAAUJ,CAAVI;AACAH,UAAAA,cAAAA,CAAAA,IAAAA,CAAAA,MAAAA;AACD;AACF;;AAED,aAAA,cAAA;AACD;;;;;;AACF","sourcesContent":["// @flow\n\nimport type { IIndexStrategy } from './IndexStrategy';\n\n/**\n * Indexes for all substring searches (e.g. the term \"cat\" is indexed as \"c\", \"ca\", \"cat\", \"a\", \"at\", and \"t\").\n */\nexport class AllSubstringsIndexStrategy implements IIndexStrategy {\n\n  /**\n   * @inheritDocs\n   */\n  expandToken(token : string) : Array<string> {\n    var expandedTokens = [];\n    var string;\n\n    for (var i = 0, length = token.length; i < length; ++i) {\n      string = '';\n\n      for (var j = i; j < length; ++j) {\n        string += token.charAt(j);\n        expandedTokens.push(string);\n      }\n    }\n\n    return expandedTokens;\n  }\n};\n"]},"metadata":{},"sourceType":"script"}