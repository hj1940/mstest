{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n/**\n * Stemming is the process of reducing search tokens to their root (or stem) so that searches for different forms of a\n * word will match. For example \"search\", \"searching\" and \"searched\" are all reduced to the stem \"search\".\n *\n * <p>This stemming tokenizer converts tokens (words) to their stem forms before returning them. It requires an\n * external stemming function to be provided; for this purpose I recommend the NPM 'porter-stemmer' library.\n *\n * <p>For more information see http : //tartarus.org/~martin/PorterStemmer/\n */\n\n\nvar StemmingTokenizer = exports.StemmingTokenizer = function () {\n  /**\n   * Constructor.\n   *\n   * @param stemmingFunction Function capable of accepting a word and returning its stem.\n   * @param decoratedIndexStrategy Index strategy to be run after all stop words have been removed.\n   */\n  function StemmingTokenizer(stemmingFunction, decoratedTokenizer) {\n    _classCallCheck(this, StemmingTokenizer);\n\n    this._stemmingFunction = stemmingFunction;\n    this._tokenizer = decoratedTokenizer;\n  }\n  /**\n   * @inheritDocs\n   */\n\n\n  _createClass(StemmingTokenizer, [{\n    key: 'tokenize',\n    value: function tokenize(text) {\n      return this._tokenizer.tokenize(text).map(this._stemmingFunction);\n    }\n  }]);\n\n  return StemmingTokenizer;\n}();\n\n;","map":{"version":3,"sources":["../../../source/Tokenizer/StemmingTokenizer.js"],"names":["StemmingTokenizer","text"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAMA;;;;;;;;;;;IASaA,iB,WAAAA,iB;AAIX;;;;;;AAMA,WAAA,iBAAA,CAAA,gBAAA,EAAA,kBAAA,EAGE;AAAA,IAAA,eAAA,CAAA,IAAA,EAAA,iBAAA,CAAA;;AACA,SAAA,iBAAA,GAAA,gBAAA;AACA,SAAA,UAAA,GAAA,kBAAA;AACD;AAED;;;;;;;6BAGSC,I,EAA+B;AACtC,aAAO,KAAA,UAAA,CAAA,QAAA,CAAA,IAAA,EAAA,GAAA,CAEA,KAFP,iBAAO,CAAP;AAGD;;;;;;AACF","sourcesContent":["// @flow\n\nimport type { ITokenizer } from './Tokenizer';\n\ntype StemmingFunction = (text : string) => string;\n\n/**\n * Stemming is the process of reducing search tokens to their root (or stem) so that searches for different forms of a\n * word will match. For example \"search\", \"searching\" and \"searched\" are all reduced to the stem \"search\".\n *\n * <p>This stemming tokenizer converts tokens (words) to their stem forms before returning them. It requires an\n * external stemming function to be provided; for this purpose I recommend the NPM 'porter-stemmer' library.\n *\n * <p>For more information see http : //tartarus.org/~martin/PorterStemmer/\n */\nexport class StemmingTokenizer implements ITokenizer {\n  _stemmingFunction : StemmingFunction;\n  _tokenizer : ITokenizer;\n\n  /**\n   * Constructor.\n   *\n   * @param stemmingFunction Function capable of accepting a word and returning its stem.\n   * @param decoratedIndexStrategy Index strategy to be run after all stop words have been removed.\n   */\n  constructor(\n    stemmingFunction : StemmingFunction,\n    decoratedTokenizer : ITokenizer\n  ) {\n    this._stemmingFunction = stemmingFunction;\n    this._tokenizer = decoratedTokenizer;\n  }\n\n  /**\n   * @inheritDocs\n   */\n  tokenize(text : string) : Array<string> {\n    return this._tokenizer\n      .tokenize(text)\n      .map(this._stemmingFunction);\n  }\n};\n"]},"metadata":{},"sourceType":"script"}